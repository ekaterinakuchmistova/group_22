 {
	"info": {
		"_postman_id": "5aadf459-1e86-40ab-be05-20a9b47a34af",
		"name": "Task3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"token\", jsonData.token); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверка на статус код 200",
							"pm.test(\"Status code 200\", function(){",
							"pm.response.to.be.have.status(200);",
							"});",
							"",
							"//Проверить, что в body приходит правильный string.\"This is the first responce from server!\"",
							"",
							"pm.test(\"Body is correct\", function ()  {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});",
							"//Показать тип",
							"console.log(typeof(\"This is the first responce from server!\")) ; ",
							"pm.test(\"Response time is more than 200ms\", function ()  {",
							"  pm.expect(pm.response.responseTime).to.be.above(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", function() {",
							"pm.response.to.have.status(200);",
							"});",
							"let jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Correct name\", function () { ",
							"    pm.expect(jsonData.name).is.to.eql(\"Mihail\"); ",
							"});",
							"pm.test(\"Correct age\", function () { ",
							"    pm.expect(jsonData.age).to.eql(\"26\"); ",
							"});",
							"pm.test(\"Correct salary\", function(){",
							"    pm.expect(jsonData.salary).is.to.eql(1000);",
							"});",
							"// console.log(jsonData.age);",
							"// console.log(jsonData.name);",
							"// console.log(jsonData.salary); ",
							"",
							"",
							"let jsonRequest = request.data;",
							"let name_request  = jsonRequest.name;",
							"let name_response = jsonData.name;",
							"pm.test(\"check name\", function() {",
							"pm.expect(name_request).to.eql(name_response);",
							"});",
							"console.log(name_request);",
							"",
							"let age_request  = jsonRequest.age;",
							"let age_response = jsonData.age;",
							"pm.test(\"check age\", function() {",
							"pm.expect(age_request).to.eql(age_response);",
							"});",
							"console.log(age_request);",
							"",
							"let salary_request  = jsonRequest.age;",
							"let salary_response = jsonData.age;",
							"pm.test(\"check salary\", function() {",
							"pm.expect(salary_request).to.eql(salary_response);",
							"});",
							"console.log(salary_request);",
							"console.log(jsonData.family);",
							"",
							"let salary = jsonData.salary;",
							"let u_salary_1_5_year_response = jsonData.family.u_salary_1_5_year;",
							"",
							"pm.test(\"CheckSalary\", function() {",
							"pm.expect(u_salary_1_5_year_response).to.eql(salary * 4);",
							"});",
							"console.log(u_salary_1_5_year_response);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mihail",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){",
							"pm.response.to.have.status(200);",
							"});",
							"const jsonRequest = pm.request.url.query.toObject();",
							"console.log(jsonRequest);",
							"const jsonData = pm.response.json();",
							"",
							"let RespName = jsonData.name;",
							"let ReqName = jsonRequest.name;",
							"   pm.test(\"Check name \", function() {",
							"   pm.expect(RespName.name).to.eql(ReqName.name);",
							"});",
							"console.log(RespName);",
							"console.log(ReqName);",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"let ReqAge = jsonRequest.age;",
							"let RespAge = jsonData.age;",
							"pm.test(\"Check age \", function(){",
							"pm.expect(ReqAge.age).is.to.eql(RespAge.age);",
							"});",
							" console.log(ReqAge);",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let ReqSalary = jsonRequest.salary;",
							"let RespSalary = jsonData.salary;",
							"pm.test(\"Check salary \", function(){",
							"pm.expect(ReqSalary.salary).is.to.eql(RespSalary.salary);",
							"});",
							"console.log(ReqSalary);",
							"//Вывести в консоль параметр family из response.",
							"console.log(jsonData.family);",
							"//Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Checking property name\", function(){",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")",
							"});",
							"console.log(jsonData.family.pets.dog.name);",
							"//Проверить, что у параметра dog есть параметры age",
							"pm.test(\"Checking property age\", function(){",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")",
							"});",
							"console.log(jsonData.family.pets.dog.age);",
							"//Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"The dog has name is 'Luky'\", function(){",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")",
							"});",
							"",
							"//Проверить, что параметр age имеет значение 4.",
							"pm.test(\"The dog has age is 4\", function(){",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Mihail&age=26&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mihail"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code = 200\", function() {",
							"    pm.response.to.have.status(200);",
							"    });",
							" //Спарсить response body в json.",
							" const jsonData = pm.response.json();",
							" //Спарсить request.",
							" const jsonRequest =  pm.request.url.query.toObject();",
							" // Проверить, что name в ответе равно name s request (name забрать из request.)",
							" let RespName = jsonData.name;",
							" let ReqName = jsonRequest.name;",
							" pm.test(\"Checking name\", function(){",
							"     pm.expect(RespName).to.eql(ReqName);",
							" });",
							" console.log(ReqName);",
							" // Проверить, что age в ответе равно age из request (age забрать из request.)",
							" let RespAge = jsonData.age;",
							" let ReqAge = jsonRequest.age;",
							" pm.test(\"Checking age\", function(){",
							"     pm.expect(RespAge).to.eql+(ReqAge);",
							" });",
							" console.log(ReqAge);",
							" // Вывести в консоль параметр salary из request.",
							" console.log(jsonRequest.salary);",
							" //Вывести в консоль параметр salary из response.",
							" console.log(jsonData.salary);",
							" //Вывести в консоль 0-й элемент параметра salary из response.",
							" console.log(jsonData.salary[0]);",
							" //Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							" console.log(jsonData.salary[1]);",
							" //Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							" console.log(jsonData.salary[2]);",
							" //Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							" let salaryResp = jsonData.salary;",
							" let salaryReq = jsonRequest.salary;",
							" console.log(salaryReq);",
							" pm.test(\"Checking salary resp[0] = salary req\", function(){",
							"     pm.expect(salaryResp[0]).to.eql+(salaryReq);",
							" });",
							" //Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							" pm.test(\"Checking salary resp[1] = salary req*2\", function(){",
							"     pm.expect(salaryResp[1]).to.eql+(salaryReq * 2);",
							" });",
							" //Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							" pm.test(\"Checking salary resp[2] = salary req*3\", function(){",
							"     pm.expect(salaryResp[2]).to.eql+(salaryReq * 3);",
							" });",
							"//Создать в окружении переменную name.",
							"pm.environment.set(\"name\", jsonData.name);",
							"// Создать в окружении переменную age.",
							"pm.environment.set(\"age\", jsonData.age);",
							"//Создать в окружении переменную salary.",
							"pm.environment.set(\"salary\", jsonRequest.salary);",
							"// Передать в окружение переменную name.",
							"pm.environment.get(\"jsonRequest.name\"); ",
							"pm.environment.get(\"jsonRequest.age\");",
							"pm.environment.get(\"jsonRequest.salary\");",
							"",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"let i = jsonData.salary;",
							"for (let i in Object.keys(jsonData.salary)) {",
							"    console.log(Object.keys(jsonData.salary)[i])",
							"};",
							"console.log(jsonData.salary);",
							"console.log([i]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Katrin&age=25&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Katrin"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200.",
							"pm.test(\"Status code = 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"const jsonData = pm.response.json();",
							"//Спарсить request.",
							"const jsonRequest =  pm.request.url.query.toObject();",
							"//Проверить, что json response имеет параметр start_qa_salary.",
							"pm.test(\"Checking start_qa_salary.\", function(){",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"console.log(jsonData.start_qa_salary);",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months.",
							"pm.test(\"Checking qa_salary_after_6_months\", function(){",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"console.log(jsonData.qa_salary_after_6_months);",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months.",
							"pm.test(\"Checking qa_salary_after_12_months\", function(){",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"console.log(jsonData.qa_salary_after_12_months);",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year.",
							"pm.test(\"Checking qa_salary_after_1.5_year\", function(){",
							"pm.expect(jsonData).to.have.property+([\"qa_salary_after_1.5_year\"]);",
							"});",
							"console.log(jsonData[\"qa_salary_after_1.5_year\"]);",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years.",
							"pm.test(\"Checking qa_salary_after_3.5_year\", function() {",
							"pm.expect(jsonData).to.have.property+([\"qa_salary_after_3.5_year\"]);",
							"});",
							"console.log(jsonData[\"qa_salary_after_3.5_years\"]);",
							"//Проверить, что json response имеет параметр person.",
							"pm.test(\"Checking person\", function() {",
							"pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"console.log(jsonData.person);",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"let salaryResp = jsonData.start_qa_salary;",
							"let salaryReq = jsonRequest.salary;",
							"pm.test(\"Checking start_qa_salary = salary req\", function(){",
							"     pm.expect(salaryResp).to.eql+(salaryReq);",
							" });",
							"console.log(environment.salary);",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"let salaryResp1 = jsonData.qa_salary_after_6_months;",
							"let salaryReq1 = jsonRequest.salary*2;",
							"pm.test(\"Checking qa_salary_after_6_months = salary_req*2\", function(){",
							"     pm.expect(salaryResp1).to.eql+(salaryReq1*2);",
							" });",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"let salaryResp2 = jsonData.qa_salary_after_12_months;",
							"let salaryReq2 = jsonRequest.salary*2.7;",
							"pm.test(\"Checking qa_salary_after_12_months = salary_req*2.7\", function(){",
							"     pm.expect(salaryResp2).to.eql+(salaryReq2*2.7);",
							"});",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"let salaryResp3 = jsonData[\"qa_salary_after_1.5_year\"];",
							"let salaryReq3 = jsonRequest.salary*3.3;",
							"pm.test(\"Checking qa_salary_after_1.5_year = salary_req*3.3\", function(){",
							"     pm.expect(salaryResp3).to.eql+(salaryReq3*3.3);",
							"});",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"let salaryResp4 = jsonData[\"qa_salary_after_3.5_year\"];",
							"let salaryReq4 = jsonRequest.salary*3.8;",
							"pm.test(\"Checking qa_salary_after_3.5_year = salary_req*3.3\", function(){",
							"     pm.expect(salaryResp4).to.eql+(salaryReq4*3.8);",
							"});",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Checking elements\", function(){",
							"     pm.expect(jsonData.person.u_name[1]).to.eql+(jsonRequest.salary);",
							"});",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Checking element 'age'\", function() {",
							"     pm.expect(jsonData.person.u_age).to.eql+(jsonRequest.age);",
							"});",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Checking element 'u_salary_5_years'\", function() {",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql+(jsonRequest.salary*4.2);",
							"});",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let i = jsonData.person;",
							" for (let i in Object.keys(jsonData.person)) {",
							"    console.log(Object.keys(jsonData.person)[i])     };",
							"console.log([i]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}

